Solve the following IVP by the 4th-order Runge-Kutta method using h = 2^-n, n =
2, 3, 4, 5, 6, 7, 8 to find the solution at T=10. Plot the solutions in [1,10] from different meshes
and compute the order of accuracy by the formula derived in the class using the solutions at
the endpoint T=10.
y′ = 1/t^2 − y/t + sin(t)*y^2
y(1) = −1



% Define the function f(t,y) = y'
f = @(t,y) 1./t.^2 - y./t + sin(t).*y.^2;

% Define the initial condition
y0 = -1;

% Define the time interval and the step sizes
T0 = 1;
Tf = 10;
n_values = 2:8;
h_values = 2.^(-n_values);

% Solve the IVP using the 4th-order Runge-Kutta method
for i = 1:length(n_values)
    n = n_values(i);
    h = h_values(i);
    t = T0:h:Tf;
    y = zeros(size(t));
    y(1) = y0;
    for j = 1:length(t)-1
        k1 = h*f(t(j), y(j));
        k2 = h*f(t(j)+h/2, y(j)+k1/2);
        k3 = h*f(t(j)+h/2, y(j)+k2/2);
        k4 = h*f(t(j)+h, y(j)+k3);
        y(j+1) = y(j) + 1/6*(k1 + 2*k2 + 2*k3 + k4);
    end
    fprintf('n = %d, h = %.4f, y(10) = %.10f\n', n, h, y(end));
    figure(1);
    hold on;
    plot(t, y);
end

% Plot the solutions
xlabel('t');
ylabel('y');
title('Solutions using the 4th-order Runge-Kutta method');
legend('n = 2', 'n = 3', 'n = 4', 'n = 5', 'n = 6', 'n = 7', 'n = 8');

% Compute the order of accuracy
y2h = y(2);
yh = y(3);
y4h = y(4);
p = log((y2h - yh)/(y4h - y2h))/log(2);
fprintf('Order of accuracy: %.3f\n', p);

############################################################################################################


% Define the differential equation y' = f(t, y)
f = @(t, y) 1/t^2 - y/t + sin(t)*y^2;

% Set the initial conditions
y0 = -1;
t0 = 1;
T = 10;

% Compute the exact solution using MATLAB's built-in ODE solver
[t_exact, y_exact] = ode45(f, [t0 T], y0);

% Compute the solutions using the 4th-order Runge-Kutta method for different step sizes
for n = 2:8
    h = 2^(-n);
    N = 2^n;
    t = linspace(t0, T, N+1);
    y = zeros(1, N+1);
    y(1) = y0;
    for i = 1:N
        k1 = h*f(t(i), y(i));
        k2 = h*f(t(i) + h/2, y(i) + k1/2);
        k3 = h*f(t(i) + h/2, y(i) + k2/2);
        k4 = h*f(t(i) + h, y(i) + k3);
        y(i+1) = y(i) + 1/6*(k1 + 2*k2 + 2*k3 + k4);
    end
    % Plot the solution for the current step size
    plot(t, y)
    hold on
end

% Plot the exact solution for comparison
plot(t_exact, y_exact, 'k', 'LineWidth', 2)
hold off

% Compute the errors and the order of accuracy
errors = zeros(1, 7);
for i = 1:7
    h = 2^(-i);
    N = 2^i;
    t = linspace(t0, T, N+1);
    y = zeros(1, N+1);
    y(1) = y0;
    for j = 1:N
        k1 = h*f(t(j), y(j));
        k2 = h*f(t(j) + h/2, y(j) + k1/2);
        k3 = h*f(t(j) + h/2, y(j) + k2/2);
        k4 = h*f(t(j) + h, y(j) + k3);
        y(j+1) = y(j) + 1/6*(k1 + 2*k2 + 2*k3 + k4);
    end
    % Compute the error at T=10
    errors(i) = abs(y(end) - y_exact(end));
    fprintf('h = 2^(-%d): y(10) = %f\n', i, y(end))
end

% Compute the order of accuracy
orders = zeros(1, 6);
for i = 1:6
    orders(i) = log2(errors(i)/errors(i+1));
end

fprintf('Order of accuracy:\n')
disp(orders)

##################################################################################
% Define the differential equation y' = f(t, y)
f = @(t, y) 1/t^2 - y/t + sin(t)*y^2;

% Set the initial conditions
y0 = -1;
t0 = 1;
T = 10;

% Compute the exact solution using MATLAB's built-in ODE solver
[t_exact, y_exact] = ode45(f, [t0 T], y0);

% Compute the solutions using the 4th-order Runge-Kutta method for different step sizes
for n = 1:7
    h = 2^(-n);
    N = 2^n;
    t = linspace(t0, T, N+1);
    y = zeros(1, N+1);
    y(1) = y0; % Set the initial value of y
    for i = 1:N
        k1 = h*f(t(i), y(i));
        k2 = h*f(t(i) + h/2, y(i) + k1/2);
        k3 = h*f(t(i) + h/2, y(i) + k2/2);
        k4 = h*f(t(i) + h, y(i) + k3);
        y(i+1) = y(i) + 1/6*(k1 + 2*k2 + 2*k3 + k4);
    end
    % Plot the solution for the current step size
    plot(t, y)
    hold on
end

% Plot the exact solution for comparison
plot(t_exact, y_exact, 'k', 'LineWidth', 2)
hold off

% Compute the errors and the order of accuracy
errors = zeros(1, 7);
for i = 1:7
    h = 2^(-i);
    N = 2^i;
    t = linspace(t0, T, N+1);
    y = zeros(1, N+1);
    y(1) = y0; % Set the initial value of y
    for j = 1:N
        k1 = h*f(t(j), y(j));
        k2 = h*f(t(j) + h/2, y(j) + k1/2);
        k3 = h*f(t(j) + h/2, y(j) + k2/2);
        k4 = h*f(t(j) + h, y(j) + k3);
        y(j+1) = y(j) + 1/6*(k1 + 2*k2 + 2*k3 + k4);
    end
    % Compute the error at T=10
    errors(i) = abs(y(end) - y_exact(end));
    fprintf('h = 2^(-%d): y(10) = %f\n', i+1, y(end))
end

% Compute the order of accuracy
orders = zeros(1, 6);
for i = 1:6
    orders(i) = log2(errors(i)/errors(i+1));
end

fprintf('Order of accuracy:\n')
disp(orders)

#################################################################
h = 2^-2: y(10) = 0.035113
h = 2^-3: y(10) = 0.039258
h = 2^-4: y(10) = 0.040408
h = 2^-5: y(10) = 0.040779
h = 2^-6: y(10) = 0.040885
h = 2^-7: y(10) = 0.040912
h = 2^-8: y(10) = 0.040919
The order of accuracy is 3.985623
